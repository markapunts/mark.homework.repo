1)What is Git?
Git-ը բաց կոդով բաշխված տարբերակի կառավարման համակարգ է:


2) Features of Git
Git-ի առանձնահատկությունները
Հետևում է պատմությանը:
Ազատ և բաց կոդով:
Աջակցում է ոչ գծային զարգացմանը:
Ստեղծում է կրկնօրինակներ:
Ընդարձակելի։
Աջակցում է համագործակցությանը:
Ճյուղավորումն ավելի հեշտ է:
Բաշխված զարգացում.


3)Git Workflow
Git-ի աշխատանքային հոսքը բաղադրատոմս կամ առաջարկություն է՝ ինչպես օգտագործել Git-ը՝ աշխատանքը հետևողական և արդյունավետ կերպով իրականացնելու համար: Git-ի աշխատանքային հոսքերը խրախուսում են մշակողներին և DevOps թիմերին արդյունավետ և հետևողականորեն օգտագործել Git-ը: Git-ն առաջարկում է մեծ ճկունություն, թե ինչպես են օգտվողները կառավարում փոփոխությունները:


4)Branch in Git
Git-ում մասնաճյուղերը ձեր ամենօրյա զարգացման գործընթացի մի մասն են: Git ճյուղերը արդյունավետորեն ցուցիչ են ձեր փոփոխությունների ակնթարթային պատկերին: Երբ ցանկանում եք ավելացնել նոր հատկություն կամ ուղղել վրիպակ, անկախ նրանից, թե որքան մեծ կամ փոքր է, դուք ստեղծում եք նոր ճյուղ՝ ձեր փոփոխությունները ամփոփելու համար:



5)git config global user.name "name" || global user.email "email address" || -Այս հրամանը սահմանում է հեղինակի անունը և էլփոստի հասցեն, որոնք կօգտագործվեն ձեր պարտավորությունների հետ:
git init-Այս հրամանն օգտագործվում է նոր պահեստ սկսելու համար:
git clone-Այս հրամանն օգտագործվում է գոյություն ունեցող URL-ից շտեմարան ստանալու համար:
git add "file"-Այս հրամանը ֆայլ է ավելացնում բեմականացման տարածքում:
git add . -Այս հրամանն ավելացնում է մեկ կամ մի քանիսը բեմադրության տարածքին:
git commit -m -Այս հրամանը ֆայլը մշտապես գրանցում կամ պատկերում է տարբերակների պատմության մեջ:
git commit -a -Այս հրամանը պարտավորեցնում է բոլոր ֆայլերը, որոնք ավելացրել եք git add հրամանով, ինչպես նաև պարտավորեցնում է բոլոր այն ֆայլերը, որոնք դուք փոխել եք դրանից հետո:
git diff-Այս հրամանը ցույց է տալիս ֆայլերի տարբերությունները, որոնք դեռ չեն բեմադրվել:
git diff –staged -Այս հրամանը ցույց է տալիս բեմադրության տարածքում գտնվող ֆայլերի և ներկա վերջին տարբերակի միջև եղած տարբերությունները:
git diff "first branch" "second branch"-Այս հրամանը ցույց է տալիս նշված երկու ճյուղերի միջև եղած տարբերությունները:
git reset "file"-Այս հրամանը հանում է ֆայլը, բայց պահպանում է ֆայլի բովանդակությունը:
git reset "commit"-Այս հրամանը չեղարկում է բոլոր պարտավորությունները նշված commit-ից հետո և պահպանում փոփոխությունները տեղական մակարդակում:
git reset –hard "commit" Այս հրամանը ջնջում է ողջ պատմությունը և վերադառնում է նշված commit-ին:
git status-Այս հրամանը թվարկում է բոլոր ֆայլերը, որոնք պետք է կատարվեն:
git rm "file"-Այս հրամանը ջնջում է ֆայլը ձեր աշխատանքային գրացուցակից և աստիճանավորում է ջնջումը:
git log-Այս հրամանն օգտագործվում է ընթացիկ մասնաճյուղի տարբերակների պատմությունը ցուցակագրելու համար:
git log –follow "file"-Այս հրամանը թվարկում է ֆայլի տարբերակների պատմությունը, ներառյալ ֆայլերի վերանվանումը:
git show "commit"-Այս հրամանը ցույց է տալիս նշված commit-ի մետատվյալների և բովանդակության փոփոխությունները:
git tag "commitID"-Այս հրամանն օգտագործվում է նշված commit-ին պիտակներ տալու համար:
git branch-Այս հրամանը թվարկում է ընթացիկ պահոցի բոլոր տեղական մասնաճյուղերը:
git branch "branch name"-Այս հրամանը ստեղծում է նոր մասնաճյուղ:
git branch -d "branch name"-Այս հրամանը ջնջում է հատկանիշի ճյուղը:
git checkout "branch name"-Այս հրամանն օգտագործվում է մի ճյուղից մյուսը անցնելու համար:
git checkout -b "branch name"-Այս հրամանը ստեղծում է նոր մասնաճյուղ և նաև անցնում է դրան
git merge "branch name"-Այս հրամանը միավորում է նշված մասնաճյուղի պատմությունը ընթացիկ ճյուղի մեջ:
git remote add "variable name" "Remote Server Link"-Այս հրամանն օգտագործվում է ձեր տեղական պահեստը հեռավոր սերվերին միացնելու համար:
git push "variable name" master-Այս հրամանն ուղարկում է հիմնական մասնաճյուղի կատարված փոփոխությունները ձեր հեռավոր պահոց:
git push "variable name" "branch"-Այս հրամանն ուղարկում է մասնաճյուղի պարտավորությունները ձեր հեռավոր պահոց:
git push –all "variable name"-Այս հրամանը մղում է բոլոր ճյուղերը դեպի ձեր հեռավոր պահեստ:
git push "variable name" :"branch name"-Այս հրամանը ջնջում է ձեր հեռավոր պահեստի մասնաճյուղը:
git pull [Repository Link]-Այս հրամանը վերցնում և միավորում է հեռավոր սերվերի փոփոխությունները ձեր աշխատանքային գրացուցակում:
git stash save-Այս հրամանը ժամանակավորապես պահում է բոլոր փոփոխված հետևված ֆայլերը:
git stash pop-Այս հրամանը վերականգնում է վերջին պահված ֆայլերը:
git stash list-Այս հրամանը թվարկում է բոլոր թաքցված փոփոխությունները:
git stash drop-Այս հրամանը մերժում է վերջին պահված փոփոխությունները:


6)Version Control-ի մասին
Ի՞նչ է «տարբերակի վերահսկումը» և ինչո՞ւ պետք է հոգ տանել: Տարբերակի կառավարումը համակարգ է, որը ժամանակի ընթացքում գրանցում է ֆայլի կամ ֆայլերի մի շարք փոփոխություններ, որպեսզի հետագայում կարողանաք հետ կանչել որոշակի տարբերակներ: Այս գրքի օրինակների համար դուք կօգտագործեք ծրագրային ապահովման աղբյուրի կոդը, քանի որ ֆայլերը վերահսկվում են տարբերակով, թեև իրականում դուք կարող եք դա անել գրեթե ցանկացած տեսակի ֆայլով համակարգչի վրա:

Եթե ​​դուք գրաֆիկական կամ վեբ դիզայներ եք և ցանկանում եք պահպանել պատկերի կամ դասավորության յուրաքանչյուր տարբերակը (ինչը, անշուշտ, կցանկանայիք), Տարբերակների վերահսկման համակարգը (VCS) շատ իմաստուն բան է օգտագործելու համար: Այն թույլ է տալիս վերադարձնել ընտրված ֆայլերը նախկին վիճակին, ամբողջ նախագիծը վերադարձնել նախկին վիճակին, համեմատել փոփոխությունները ժամանակի ընթացքում, տեսնել, թե ով է վերջին անգամ փոփոխել ինչ-որ բան, որը կարող է խնդիր առաջացնել, ով և երբ է ներկայացրել խնդիր և այլն: VCS-ի օգտագործումը նաև ընդհանուր առմամբ նշանակում է, որ եթե դուք ինչ-որ բան քանդեք կամ կորցնեք ֆայլերը, կարող եք հեշտությամբ վերականգնել: Բացի այդ, դուք ստանում եք այս ամենը շատ քիչ գումարի դիմաց:


7)About repostitories
Ի՞նչ է պահոցը Git-ում: Git-ը տեղադրելուց հետո կարող եք այն նախաստորագրել նախագծի մեջ՝ նոր Git ռեպո ստեղծելու համար:

Git պահոցը .git/նախագծի ներսում գտնվող թղթապանակն է: Այս պահոցը հետևում է ձեր նախագծի ֆայլերում կատարված բոլոր փոփոխություններին՝ ժամանակի ընթացքում ստեղծելով պատմություն: Այսինքն, եթե դուք ջնջում եք .git/թղթապանակը, ապա ջնջում եք ձեր նախագծի պատմությունը:


8)How Github works.
GitHub-ը վեբ վրա հիմնված ինտերֆեյս է, որն օգտագործում է Git-ը՝ բաց կոդով տարբերակների կառավարման ծրագրակազմը, որը թույլ է տալիս մի քանի մարդկանց միաժամանակ առանձին փոփոխություններ կատարել վեբ էջերում: Ինչպես նշում է Carpenter-ը, քանի որ այն թույլ է տալիս իրական ժամանակում համագործակցել, GitHub-ը խրախուսում է թիմերին աշխատել միասին՝ կառուցելու և խմբագրելու իրենց կայքի բովանդակությունը:


9)Github and the command line
GitHub CLI-ն հրամանի տող գործիք է, որը բերում է ձգման հարցումներ, խնդիրներ, GitHub գործողություններ և GitHub-ի այլ գործառույթներ ձեր տերմինալում, այնպես որ կարող եք կատարել ձեր ամբողջ աշխատանքը մեկ տեղում: GitHub CLI-ն բաց կոդով գործիք է՝ ձեր համակարգչի հրամանի տողից GitHub-ն օգտագործելու համար:
